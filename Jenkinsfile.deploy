// new adjusted pipeline
pipeline {
    agent any

    environment {
        CLUSTER_NAME = 'pythonapp.k8s.local'
        KOPS_STATE_STORE = 's3://pragra-kops'
        AWS_REGION = 'us-east-1'
        ZONES = 'us-east-1a,us-east-1b'
        IMAGE_NAME = 'vishyswaminathan/python-image'
        IMAGE_TAG = 'latest'
        HELM_CHART_PATH = 'helm/pythonapp-charts'
        SSH_PUBLIC_KEY_PATH = '/var/lib/jenkins/.ssh/id_ed25519.pub'  // Changed to absolute path
    }

    stages {
        stage('Verify SSH Key Exists') {
            steps {
                script {
                    // Verify the SSH key exists before proceeding
                    sh """
                    if [ ! -f ${SSH_PUBLIC_KEY_PATH} ]; then
                        echo "ERROR: SSH public key not found at ${SSH_PUBLIC_KEY_PATH}"
                        exit 1
                    fi
                    """
                }
            }
        }

        stage('Create Kubernetes Cluster with Kops') {
            steps {
                script {
                    sh """
                    export KOPS_STATE_STORE=${KOPS_STATE_STORE}
                    export NAME=${CLUSTER_NAME}

                    echo "Creating Kubernetes cluster: ${CLUSTER_NAME}"
                    echo "Using SSH key from: ${SSH_PUBLIC_KEY_PATH}"

                    kops create cluster --name=\${NAME} \
                        --state=\${KOPS_STATE_STORE} \
                        --zones=${ZONES} \
                        --node-count=2 \
                        --node-size=t3.small \
                        --master-size=t3.medium \
                        --node-volume-size=12 \
                        --master-volume-size=12 \
                        --ssh-public-key=${SSH_PUBLIC_KEY_PATH} \
                        --yes
                    """
                }
            }
        }

        stage('Wait for Cluster to be Ready') {
            steps {
                script {
                    echo "Waiting for cluster nodes to become ready..."
                    sh """
                    export KOPS_STATE_STORE=${KOPS_STATE_STORE}
                    export NAME=${CLUSTER_NAME}

                    # Export kubeconfig
                    kops export kubeconfig --name=\${NAME} --admin

                    # Wait for nodes with timeout
                    timeout 300 bash -c -- 'while ! kubectl get nodes 2>/dev/null | grep -q Ready; do
                        echo "Waiting for nodes to be ready..."
                        sleep 30
                    done'
                    """
                }
            }
        }

        stage('Deploy Application with Helm') {
            steps {
                script {
                    sh """
                    echo "Deploying application using Helm"
                    helm upgrade --install python-app ${HELM_CHART_PATH} \
                        --set image.repository=${IMAGE_NAME} \
                        --set image.tag=${IMAGE_TAG} \
                        --wait
                    """
                }
            }
        }
    }

    post {
        success {
            echo "✅ Cluster created and application deployed!"
        }
        failure {
            echo "❌ Pipeline failed. Check the kops, kubectl, or helm logs above."
            script {
                // Optional: Add cleanup in case of failure
                sh """
                kops delete cluster --name=${CLUSTER_NAME} --yes || true
                """
            }
        }
    }
}