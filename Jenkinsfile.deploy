pipeline {
    agent any

    environment {
        CLUSTER_NAME = 'pythonapp.k8s.local'
        KOPS_STATE_STORE = 's3://pragra-kops'
        AWS_REGION = 'us-east-1'
        ZONES = 'us-east-1a,us-east-1b'
        IMAGE_NAME = 'vishyswaminathan/python-image'
        IMAGE_TAG = 'latest'
        HELM_CHART_PATH = 'helm/pythonapp-charts'
        SSH_PUBLIC_KEY_PATH = '/var/lib/jenkins/.ssh/id_ed25519.pub'
    }

    stages {
        stage('Configure AWS') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    script {
                        sh """
                        export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                        export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                        export AWS_DEFAULT_REGION=${AWS_REGION}
                        
                        # Verify AWS access
                        aws sts get-caller-identity
                        aws s3 ls ${KOPS_STATE_STORE} || echo "S3 access verified"
                        """
                    }
                }
            }
        }

        stage('Verify SSH Key Exists') {
            steps {
                script {
                    sh """
                    if [ ! -f ${SSH_PUBLIC_KEY_PATH} ]; then
                        echo "ERROR: SSH public key not found at ${SSH_PUBLIC_KEY_PATH}"
                        exit 1
                    fi
                    """
                }
            }
        }

        stage('Create Kubernetes Cluster with Kops') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    script {
                        sh """
                        export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                        export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                        export AWS_DEFAULT_REGION=${AWS_REGION}
                        export KOPS_STATE_STORE=${KOPS_STATE_STORE}
                        export NAME=${CLUSTER_NAME}

                        echo "Creating Kubernetes cluster: ${CLUSTER_NAME}"
                        echo "Using SSH key from: ${SSH_PUBLIC_KEY_PATH}"

                        kops create cluster --name=\${NAME} \
                            --state=\${KOPS_STATE_STORE} \
                            --zones=${ZONES} \
                            --node-count=2 \
                            --node-size=t3.small \
                            --master-size=t3.medium \
                            --node-volume-size=12 \
                            --master-volume-size=12 \
                            --ssh-public-key=${SSH_PUBLIC_KEY_PATH} \
                            --yes
                        """
                    }
                }
            }
        }

        stage('Wait for Cluster to be Ready') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    script {
                        sh """
                        export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                        export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                        export AWS_DEFAULT_REGION=${AWS_REGION}
                        export KOPS_STATE_STORE=${KOPS_STATE_STORE}
                        export NAME=${CLUSTER_NAME}

                        # Export kubeconfig
                        kops export kubeconfig --name=\${NAME} --admin

                        # Wait for nodes with timeout
                        timeout 600 bash -c -- 'while ! kubectl get nodes 2>/dev/null | grep -q Ready; do
                            echo "Waiting for nodes to be ready..."
                            sleep 30
                        done'
                        
                        # Verify all nodes are ready
                        kubectl get nodes
                        """
                    }
                }
            }
        }

        stage('Deploy Application with Helm') {
            steps {
                script {
                    sh """
                    echo "Deploying application using Helm"
                    helm upgrade --install python-app ${HELM_CHART_PATH} \
                        --set image.repository=${IMAGE_NAME} \
                        --set image.tag=${IMAGE_TAG} \
                        --wait --timeout 5m
                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    sh """
                    kubectl rollout status deployment/python-app
                    kubectl get pods -o wide
                    """
                }
            }
        }
    }

    post {
        success {
            echo "✅ Cluster created and application deployed successfully!"
            sh """
            echo "Access the application with:"
            kubectl get svc python-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
            """
        }
        failure {
            echo "❌ Pipeline failed. Check the logs above."
            script {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh """
                    export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                    export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                    kops delete cluster --name=${CLUSTER_NAME} --yes || true
                    """
                }
            }
        }
        always {
            script {
                archiveArtifacts artifacts: '**/kubeconfig', allowEmptyArchive: true
            }
        }
    }
}
