// lets try a new branch
pipeline {
    agent any

    environment {
        CLUSTER_NAME = 'pythonapp.k8s.local'
        KOPS_STATE_STORE = 's3://pragra-kops'
        AWS_REGION = 'us-east-1'
        ZONES = 'us-east-1a,us-east-1b'
        IMAGE_NAME = 'vishyswaminathan/python-image'
        IMAGE_TAG = 'latest'
        HELM_CHART_PATH = 'helm/pythonapp-charts'
        SSH_PUBLIC_KEY_PATH = '/var/lib/jenkins/.ssh/id_ed25519.pub'
    }

    stages {
        stage('Verify AWS Configuration') {
            steps {
                sh """
                echo "✅ Verifying AWS configuration..."
                aws sts get-caller-identity
                aws s3 ls ${KOPS_STATE_STORE} || echo "S3 bucket access verified"
                """
            }
        }

        stage('Verify SSH Key Exists') {
            steps {
                sh """
                if [ ! -f ${SSH_PUBLIC_KEY_PATH} ]; then
                    echo "❌ ERROR: SSH public key not found at ${SSH_PUBLIC_KEY_PATH}"
                    exit 1
                else
                    echo "✅ SSH key found at ${SSH_PUBLIC_KEY_PATH}"
                fi
                """
            }
        }
      /*
        stage('Create Kubernetes Cluster with Kops') {
            steps {
                sh """
                export AWS_DEFAULT_REGION=${AWS_REGION}
                export KOPS_STATE_STORE=${KOPS_STATE_STORE}
                export NAME=${CLUSTER_NAME}

                echo "🔧 Checking for existing Kubernetes cluster: \${NAME}"
                if ! kops get cluster --name=\${NAME} --state=\${KOPS_STATE_STORE} > /dev/null 2>&1; then
                    echo "🚀 Creating Kubernetes cluster: \${NAME}"
                    kops create cluster --name=\${NAME} \\
                        --state=\${KOPS_STATE_STORE} \\
                        --zones=${ZONES} \\
                        --dns private \\
                        --node-count=2 \\
                        --node-size=t3.small \\
                        --master-size=t3.medium \\
                        --node-volume-size=12 \\
                        --master-volume-size=12 \\
                        --ssh-public-key=${SSH_PUBLIC_KEY_PATH} \\
                        --yes

                    kops update cluster --name=\${NAME} --state=\${KOPS_STATE_STORE} --yes
                    kops export kubeconfig --name=\${NAME} --state=\${KOPS_STATE_STORE}
                    kops validate cluster --name=\${NAME} --state=\${KOPS_STATE_STORE} --wait 10m
                else
                    echo "⚠️ Cluster already exists. Skipping creation."
                    kops export kubeconfig --name=\${NAME} --state=\${KOPS_STATE_STORE}
                fi
                """
            }
        } 

        stage('Wait for Cluster to be Ready') {
            steps {
                sh """
                export AWS_DEFAULT_REGION=${AWS_REGION}
                export KOPS_STATE_STORE=${KOPS_STATE_STORE}
                export NAME=${CLUSTER_NAME}

                for i in \$(seq 1 15); do
                    echo "🔍 Attempt \$i/15: Validating cluster..."
                    if kops validate cluster --name=\${NAME} --state=\${KOPS_STATE_STORE}; then
                        echo "✅ Cluster validation passed!"
                        break
                    else
                        echo "🕒 Cluster not ready yet. Sleeping 30 seconds..."
                        sleep 30
                    fi

                    if [ "\$i" -eq 15 ]; then
                        echo "❌ Cluster did not become ready in time."
                        exit 1
                    fi
                done

                echo "📶 Checking kubectl access..."
                for i in \$(seq 1 10); do
                    if kubectl get nodes > /dev/null 2>&1; then
                        echo "✅ kubectl can access the cluster."
                        break
                    else
                        sleep 20
                    fi
                done
                """
            }
        } */

        stage('Validate Kubernetes Cluster') {
            steps {
                sh """
                export AWS_DEFAULT_REGION=${AWS_REGION}
                export KOPS_STATE_STORE=${KOPS_STATE_STORE}
                export NAME=${CLUSTER_NAME}

                echo "🔧 Validating existing Kubernetes cluster: \${NAME}"
                kops export kubeconfig --name=\${NAME} --state=\${KOPS_STATE_STORE}
                kops validate cluster --name=\${NAME} --state=\${KOPS_STATE_STORE} --wait 10m
                """
            }
        }

        stage('Deploy Application with Helm') {
            steps {
                sh """
                echo "🧹 Cleaning up previous Helm release..."
                helm uninstall python-app 2>/dev/null || true

                echo "🚀 Deploying Helm chart..."
                helm upgrade --install python-app ${HELM_CHART_PATH} \\
                    --set image.repository=${IMAGE_NAME} \\
                    --set image.tag=${IMAGE_TAG} \\
                    --wait \\
                    --timeout 10m \\
                    --atomic \\
                    --debug
                """
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    sh """
                    echo "🔍 Checking rollout status..."
                    kubectl rollout status deployment/pythonapp --timeout=300s || echo "⚠️ Rollout failed."

                    echo "🔎 Describe deployment:"
                    kubectl describe deployment pythonapp || true

                    echo "🐳 Describe pods:"
                    kubectl get pods -o wide
                    kubectl describe pod -l app.kubernetes.io/name=pythonapp || true

                    echo "📝 Logs from the pod:"
                    kubectl logs -l app.kubernetes.io/name=pythonapp --tail=50 || true

                    echo "🌐 Application endpoint (if using LoadBalancer):"
                    kubectl get svc python-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo "⚠️ Not using LoadBalancer"
                    """
                }
            }
        }
    }

    post {
        success {
            echo "✅ Cluster created and application deployed successfully!"
        }
        failure {
            echo "❌ Pipeline failed. Check logs for issues."
            // Uncomment if you still want automatic cleanup:
            // sh "kops delete cluster --name=${CLUSTER_NAME} --yes || true"
        }
    }
}
