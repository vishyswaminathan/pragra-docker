pipeline {
    agent any

    environment {
        CLUSTER_NAME = 'pythonapp.k8s.local'
        KOPS_STATE_STORE = 's3://pragra-kops'
        AWS_REGION = 'us-east-1'
        ZONES = 'us-east-1a,us-east-1b'
        IMAGE_NAME = 'vishyswaminathan/python-image'
        IMAGE_TAG = 'latest'
        HELM_CHART_PATH = 'helm/pythonapp-charts'
        SSH_PUBLIC_KEY_PATH = '/var/lib/jenkins/.ssh/id_ed25519.pub'
    }

    stages {
        stage('Verify AWS Configuration') {
            steps {
                script {
                    sh """
                    echo "Verifying AWS configuration..."
                    aws sts get-caller-identity
                    aws s3 ls ${KOPS_STATE_STORE} || echo "S3 bucket access verified"
                    """
                }
            }
        }

        stage('Verify SSH Key Exists') {
            steps {
                script {
                    sh """
                    if [ ! -f ${SSH_PUBLIC_KEY_PATH} ]; then
                        echo "ERROR: SSH public key not found at ${SSH_PUBLIC_KEY_PATH}"
                        exit 1
                    else
                        echo "SSH key found at ${SSH_PUBLIC_KEY_PATH}"
                    fi
                    """
                }
            }
        }

        stage('Delete Existing Cluster if Present') {
            steps {
                script {
                    sh """
                    export AWS_DEFAULT_REGION=${AWS_REGION}
                    export KOPS_STATE_STORE=${KOPS_STATE_STORE}
                    export NAME=${CLUSTER_NAME}

                    echo "Checking if cluster exists..."
                    if kops get cluster --name=\${NAME} --state=\${KOPS_STATE_STORE}; then
                        echo "⚠️ Cluster already exists. Deleting it before creation..."
                        kops delete cluster --name=\${NAME} --state=\${KOPS_STATE_STORE} --yes
                    else
                        echo "✅ No existing cluster found. Proceeding..."
                    fi
                    """
                }
            }
        }

        stage('Create Kubernetes Cluster with Kops') {
            steps {
                script {
                    sh """
                    export AWS_DEFAULT_REGION=${AWS_REGION}
                    export KOPS_STATE_STORE=${KOPS_STATE_STORE}
                    export NAME=${CLUSTER_NAME}

                    echo "Creating Kubernetes cluster: ${CLUSTER_NAME}"
                    echo "Using SSH key from: ${SSH_PUBLIC_KEY_PATH}"

                    kops create cluster --name=\${NAME} \\
                        --state=\${KOPS_STATE_STORE} \\
                        --zones=${ZONES} \\
                        --node-count=2 \\
                        --node-size=t3.small \\
                        --master-size=t3.medium \\
                        --node-volume-size=12 \\
                        --master-volume-size=12 \\
                        --ssh-public-key=${SSH_PUBLIC_KEY_PATH} \\
                        --yes
                    """
                }
            }
        }

        stage('Wait for Cluster to be Ready') {
            steps {
                script {
                    echo "Waiting for cluster to become ready using 'kops validate cluster'..."
                    sh """
                    export AWS_DEFAULT_REGION=${AWS_REGION}
                    export KOPS_STATE_STORE=${KOPS_STATE_STORE}
                    export NAME=${CLUSTER_NAME}

                    for i in {1..10}; do
                        echo "Validating cluster (attempt \$i/10)..."
                        kops validate cluster --name=\${NAME} --state=\${KOPS_STATE_STORE}
                        if [ \$? -eq 0 ]; then
                            echo "✅ Cluster is validated and ready!"
                            break
                        else
                            echo "⏳ Cluster not ready yet. Retrying in 30 seconds..."
                            sleep 30
                        fi
                        if [ \$i -eq 10 ]; then
                            echo "❌ Cluster did not become ready in time."
                            exit 1
                        fi
                    done

                    kops export kubeconfig --name=\${NAME} --admin
                    echo "ℹ️ Cluster Info:"
                    kubectl cluster-info || true
                    """
                }
            }
        }

        stage('Deploy Application with Helm') {
            steps {
                script {
                    sh """
                    echo "Cleaning up any previous installation..."
                    helm uninstall python-app 2>/dev/null || true

                    echo "Deploying application using Helm..."
                    helm upgrade --install python-app ${HELM_CHART_PATH} \\
                        --set image.repository=${IMAGE_NAME} \\
                        --set image.tag=${IMAGE_TAG} \\
                        --wait \\
                        --timeout 10m \\
                        --atomic \\
                        --debug
                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    sh """
                    echo "Verifying deployment..."
                    kubectl rollout status deployment/python-app --timeout=300s
                    kubectl get pods -o wide
                    echo "Application endpoint:"
                    kubectl get svc python-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
                    """
                }
            }
        }
    }

    post {
        success {
            echo "✅ Cluster created and application deployed successfully!"
        }
        failure {
            echo "❌ Pipeline failed. Check the logs above."
            script {
                sh """
                echo "Gathering diagnostics..."
                export AWS_DEFAULT_REGION=${AWS_REGION}
                kops validate cluster --name=${CLUSTER_NAME} --state=${KOPS_STATE_STORE} || true
                kops get clusters --state=${KOPS_STATE_STORE} || true

                echo "Cleaning up cluster..."
                kops delete cluster --name=${CLUSTER_NAME} --yes || true
                """
            }
        }
    }
}
